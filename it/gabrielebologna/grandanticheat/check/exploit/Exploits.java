package it.gabrielebologna.grandanticheat.check.exploit;

import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.UUID;

import org.bukkit.Bukkit;
import org.bukkit.Material;
import org.bukkit.enchantments.Enchantment;
import org.bukkit.entity.HumanEntity;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.block.SignChangeEvent;
import org.bukkit.event.inventory.InventoryAction;
import org.bukkit.event.inventory.InventoryCreativeEvent;
import org.bukkit.event.player.*;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.meta.BookMeta;
import org.bukkit.inventory.meta.ItemMeta;
import org.bukkit.inventory.meta.PotionMeta;
import org.bukkit.potion.Potion;

import it.gabrielebologna.grandanticheat.GrandAntiCheat;
import it.gabrielebologna.grandanticheat.check.Check;
import it.gabrielebologna.grandanticheat.player.PlayerData;
import it.gabrielebologna.grandanticheat.utils.UUIDFetcher;

public class Exploits extends Check
{
	private ArrayList<String> commands;
	
	public Exploits()
	{
		super("Exploits");
		
		commands = new ArrayList<>();
		commands.add("//calc");
		commands.add("//calculate");
		commands.add("/worldedit:/calc");
		commands.add("//to");
		commands.add("//eval");
		commands.add("//evaluate");
		commands.add("//solve");
		commands.add("/hd readtext");
		commands.add("/holographicdisplays readtext");
		commands.add("/hd:readtext");
		commands.add("/holographicdisplays:readtext");
		commands.add("/pex promote");
		commands.add("/pex demote");
		commands.add("/promote");
		commands.add("/demote");
		commands.add("/execute");
		commands.add("/permissionsex promote");
		commands.add("/permissionsex demote");
		commands.add("/permissionsex:promote");
		commands.add("/permissionsex:demote");
		commands.add("/skin");
	}
	
	@Override
	public void setup()
	{
		if (GrandAntiCheat.isDebugMode())
		{
			this.getSettings().addDefault("items-fix", true);
			this.getSettings().addDefault("commands", true);
			this.getSettings().addDefault("books", true);
			this.getSettings().addDefault("duplication", true);
			this.getSettings().addDefault("uuid-spoof", true);
			this.getSettings().addDefault("signs", true);
			this.getSettings().addDefault("login", true);
		}
	}
	
	@EventHandler
	public void onKick(PlayerKickEvent event)
	{
		if (this.isToggled("books") && event.getReason().toLowerCase().equalsIgnoreCase("invalid book data"))
		{
			Player player = event.getPlayer();
			PlayerData playerData = GrandAntiCheat.getPlayerDataManager().getPlayerData(player);
			GrandAntiCheat.getFlagManager().flagPlayer(player, this, "Type B - Books", "Ping: " + playerData.getPing() + ", TPS: " + GrandAntiCheat.getLagManager().getTPS(), true);
			event.setCancelled(true);
		}
	}

	@EventHandler
	public void onLogin(AsyncPlayerPreLoginEvent event)
	{
		if (!this.isToggled("login"))
		{
			return;
		}

		String thisName = event.getName().toLowerCase();
		int ips = 0;

		for (Player player: Bukkit.getOnlinePlayers())
		{
			String otherName = player.getName().toLowerCase();
			
			if (thisName.equalsIgnoreCase(otherName))
			{
				event.setLoginResult(AsyncPlayerPreLoginEvent.Result.KICK_OTHER);
				event.setKickMessage("§9GrandAntiCheat> §7Another player is online with your same nickname.");
				return;
			}

			if (event.getAddress().getHostAddress().equalsIgnoreCase(player.getAddress().getHostString()))
			{
				ips++;
			}
		}

		if (ips > 2)
		{
			event.setLoginResult(AsyncPlayerPreLoginEvent.Result.KICK_OTHER);
			event.setKickMessage("§9GrandAntiCheat> §7There are several users with your same IP address.");
			return;
		}

		//String[] ipser = {"127.0.0.1", "0.0.0.0", "localhost"};

		/*for (String ip: ipser)
		{
			if (event.getAddress().getHostAddress().toLowerCase().equalsIgnoreCase(ip) || event.getAddress().getHostName().toLowerCase().equalsIgnoreCase(ip))
			{
				event.setLoginResult(AsyncPlayerPreLoginEvent.Result.KICK_OTHER);
				event.setKickMessage("§7You have got a bad IP address.");
				return;
			}
		}*/
	}
	
	@EventHandler(priority = EventPriority.LOW, ignoreCancelled = true)
	public void onInventoryCreative(final InventoryCreativeEvent event)
	{
		final HumanEntity whoClicked = event.getWhoClicked();

		if (this.isToggled("items-fix") && event.getAction() == InventoryAction.PLACE_ALL && whoClicked instanceof Player)
		{
			final ItemStack itemStack = event.getCursor();
			final Material material = itemStack.getType();
			@SuppressWarnings("deprecation")
			ItemStack itemStackRemake = new ItemStack(material, itemStack.getAmount(), itemStack.getData().getData());
			final ItemMeta itemMeta = itemStack.getItemMeta();

			if (itemMeta != null)
			{
				if (itemMeta instanceof PotionMeta)
				{
					((PotionMeta) itemMeta).clearCustomEffects();

					if (material == Material.POTION)
					{
						final Potion itemStackPotion = Potion.fromItemStack(itemStackRemake);

						if (Potion.fromItemStack(itemStack).isSplash())
						{
							itemStackPotion.setSplash(true);
						}

						itemStackRemake = itemStackPotion.toItemStack(itemStackRemake.getAmount());
					}
				}

				itemMeta.setDisplayName(null);
				itemMeta.setLore(null);

				itemStackRemake.setItemMeta(itemMeta);
			}

			event.setCursor(itemStackRemake);
		}
	}
	
	@EventHandler(priority = EventPriority.LOWEST, ignoreCancelled = true)
	public void onPlayerCommand(final PlayerCommandPreprocessEvent event)
	{
		if (!event.isCancelled() && this.isToggled("commands"))
		{
			final String message = event.getMessage().replaceAll("[\\w]+:", "").toLowerCase();			

			for (final String command : commands)
			{
				if (message.startsWith(command + " ") || message.endsWith(command))
				{
					event.setCancelled(true);
					break;
				}
			}

			if (message.startsWith("/bukkit") || message.startsWith("/minecraft") || message.startsWith("/spigot") || message.startsWith("/paper"))
			{
				event.setCancelled(true);
			}
						
			if (message.startsWith("/mv ") && (message.contains("^") || message.contains("|") || message.contains("*") || message.contains("<") || message.contains(">")))
			{
				event.setCancelled(true);
			}
		}
	}
	
	@EventHandler(priority = EventPriority.LOWEST, ignoreCancelled = true)
	public void onPlayerEditBook(final PlayerEditBookEvent event)
	{
		final BookMeta bookMeta = event.getNewBookMeta();
		final Player player = event.getPlayer();
		PlayerData playerData = GrandAntiCheat.getPlayerDataManager().getPlayerData(player);

		if (this.isToggled("books"))
		{
			if (bookMeta == null)
			{
				GrandAntiCheat.getFlagManager().flagPlayer(player, this, "Type C - Duplication", "Ping: " + playerData.getPing() + ", TPS: " + GrandAntiCheat.getLagManager().getTPS(), true);
				event.setNewBookMeta(event.getPreviousBookMeta());
			}
			else if (bookMeta.getEnchants().size() != 0)
			{
				GrandAntiCheat.getFlagManager().flagPlayer(player, this, "Type C - Duplication", "Ping: " + playerData.getPing() + ", TPS: " + GrandAntiCheat.getLagManager().getTPS(), true);
				event.setNewBookMeta(event.getPreviousBookMeta());
			}
			else if (bookMeta.getPageCount() > 50)
			{
				GrandAntiCheat.getFlagManager().flagPlayer(player, this, "Type C - Duplication", "Ping: " + playerData.getPing() + ", TPS: " + GrandAntiCheat.getLagManager().getTPS(), true);
				event.setNewBookMeta(event.getPreviousBookMeta());
			}
			else
			{
				for (String page : bookMeta.getPages())
				{
					if (this.isToggled("duplication"))
					{
						for (final String word : page.split(""))
						{
							if (word.getBytes(StandardCharsets.UTF_8).length > 2)
							{
								GrandAntiCheat.getFlagManager().flagPlayer(player, this, "Type C - Duplication", "Ping: " + playerData.getPing() + ", TPS: " + GrandAntiCheat.getLagManager().getTPS(), true);
								event.setNewBookMeta(event.getPreviousBookMeta());
								return;
							}
						}
					}

					if (this.isToggled("books"))
					{
						if (page.length() > 340)
						{
							GrandAntiCheat.getFlagManager().flagPlayer(player, this, "Type B - Books", "Ping: " + playerData.getPing() + ", TPS: " + GrandAntiCheat.getLagManager().getTPS(), true);
							event.setNewBookMeta(event.getPreviousBookMeta());
							return;
						}
					}
				}
			}
		}
	}
	
	@EventHandler(priority = EventPriority.LOWEST, ignoreCancelled = true)
	public void onPlayerLogin(final PlayerLoginEvent event)
	{
		final Player player = event.getPlayer();

		if (this.isToggled("uuid-spoof"))
		{
			GrandAntiCheat.getPlugin().getServer().getScheduler().runTaskAsynchronously(GrandAntiCheat.getPlugin(), () ->
			{
				final String playerName = player.getName();
				final String originalUUID = player.getUniqueId().toString().replace("-", "");
				final String offlineUUID = UUID.nameUUIDFromBytes(("OfflinePlayer:" + playerName).getBytes()).toString().replace("-", "");

				if (!originalUUID.contains(offlineUUID))
				{
					final String onlineUUID = UUIDFetcher.fetchOnline(playerName);

					if (onlineUUID == null || !onlineUUID.contains(originalUUID))
					{
						event.setResult(PlayerLoginEvent.Result.KICK_OTHER);
						event.setKickMessage("§9GrandAntiCheat> §7UUID Spoof is not allowed.");
					}
				}
			});
		}
	}
	
	@EventHandler(priority = EventPriority.LOWEST, ignoreCancelled = true)
	public void onSignChange(final SignChangeEvent event)
	{
		final Player player = event.getPlayer();
		PlayerData playerData = GrandAntiCheat.getPlayerDataManager().getPlayerData(player);

		for (String line : event.getLines())
		{
			if (this.isToggled("duplication"))
			{
				for (String word : line.split(""))
				{
					if (word.getBytes(StandardCharsets.UTF_8).length > 2)
					{
						GrandAntiCheat.getFlagManager().flagPlayer(player, this, "Type C - Duplication", "Ping: " + playerData.getPing() + ", TPS: " + GrandAntiCheat.getLagManager().getTPS(), true);
						event.setCancelled(true);
						return;
					}
				}
			}

			if (this.isToggled("signs"))
			{
				if (line.length() >= 46)
				{
					GrandAntiCheat.getFlagManager().flagPlayer(player, this, "Type E - Signs", "Ping: " + playerData.getPing() + ", TPS: " + GrandAntiCheat.getLagManager().getTPS(), true);
					event.setCancelled(true);
					return;
				}
			}
		}
	}
	
	   @EventHandler
	    public void onDamage(PlayerInteractEvent event)
	   {
	        Player attacker = event.getPlayer();
	        Player player = event.getPlayer();
	        PlayerData playerData = GrandAntiCheat.getPlayerDataManager().getPlayerData(player);
	        ItemStack is = attacker.getItemInHand();
	        
	        if (is == null)
	        {
	        	return;
	        }
	        
	        if ((is.getType() != Material.BOOK_AND_QUILL) && (is.getType() != Material.WRITTEN_BOOK))
	        {
	        	return;
	        }
	        
	        if (is.getEnchantments().size() > 0)
	        {
	            for (Enchantment ench : is.getEnchantments().keySet())
	            {
	                is.removeEnchantment(ench);
	            }

	            event.setCancelled(true);
	            GrandAntiCheat.getFlagManager().flagPlayer(player, this, "Type B - Books", "Ping: " + playerData.getPing() + ", TPS: " + GrandAntiCheat.getLagManager().getTPS(), true);
	            attacker.getInventory().removeItem(is);
	        }
	    }

	    @EventHandler
	    public void onEdit(PlayerEditBookEvent event)
	    {
	    	Player player = event.getPlayer();
	    	PlayerData playerData = GrandAntiCheat.getPlayerDataManager().getPlayerData(player);
	        BookMeta book = event.getNewBookMeta();
	        
	        if (book.getEnchants().size() > 0)
	        {
	            event.setCancelled(true);
	            event.getPlayer().getInventory().remove(Material.BOOK_AND_QUILL);
	            GrandAntiCheat.getFlagManager().flagPlayer(player, this, "Type B - Books", "Ping: " + playerData.getPing() + ", TPS: " + GrandAntiCheat.getLagManager().getTPS(), true);
	        }
	    }
}